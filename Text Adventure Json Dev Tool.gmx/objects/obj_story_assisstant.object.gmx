<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

data = ds_list_create();
index = 0;

//name = "";
print = "";//current_text_string;

typed_letters = string_length(print);
//print = string_copy(current_text_string, 0, typed_letters);

choice_selector_index = 0;

if (!Game_CTRL.custom_debug_mode){
    typing_speed = 1;//20;
}else{
    typing_speed = 10;
}

//timer variables
seconds_elapsed = 0;
count = false;

accept_enter = true;

//choices_generated = false;
buttons_generated = false;

button_pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///choices_generated = false;

choices_generated = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///delay before enter is accepted again

accept_enter = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Action
/*if(count){
    seconds_elapsed += 1 / room_speed;
}*/

get_input();

//if(enter_pressed || mouse_left_released){
if (button_pressed){
show_message_custom_debug("obj_story_assistant: button is pressed and story assisstant knows it");

    //if(accept_enter){
    //show_message("accept enter is true");
        /// Finish typing or close dialog 
        //ovo sam koristio da odmah sve ispise... sada NE RADI NISTA&lt; SAMO ZBUNJUJE!
        if(typed_letters &lt; current_text_string_length){
            typed_letters = current_text_string_length;
            print = current_text_string;
        //ODAVDE NADALJE RADI
        }else{
            var next_index = ds_map_find_value(dialog_element, "next_index");
            //if there are choices confirm selected one
            if(ds_list_size(choices_list) &gt; 0){
                show_message_custom_debug("are we at least here?");
                //choice_selector_index je selected choice
                var selected_choice = ds_list_find_value(choices_list, choice_selector_index);
                var variables_modificators = ds_map_find_value(selected_choice, "variables");
                var variables_modificators_size = ds_list_size(variables_modificators);
                var timers_list = ds_map_find_value(selected_choice, "timers");
                var timers_list_size = ds_list_size(timers_list);
                
                var timer_modified_choice = false;
                
                /*if(timers_list_size &gt; 0){
                    var relevant_timers = ds_list_create();
                    
                    for(var i = 0; i &lt; timers_list_size; i++){
                        var current_timer = ds_list_find_value(timers_list, i);
                        if(ds_map_find_value(current_timer, "seconds") &lt; seconds_elapsed){
                            ds_list_add(relevant_timers, current_timer);
                        }
                    }
                    //check timers
                    if(ds_list_size(relevant_timers) &gt; 0){
                        timer_modified_choice = true;
                        var most_relevant_timer = 0;
                        var actual_timer_map = ds_map_create();
                        
                        for(var i = 0; i &lt; ds_list_size(relevant_timers); i++){
                            var currently_selected_timer = ds_list_find_value(relevant_timers, i);
                            var timers_seconds = ds_map_find_value(currently_selected_timer, "seconds");
                            if(timers_seconds &gt; most_relevant_timer){
                                most_relevant_timer = timers_seconds;
                                actual_timer_map = currently_selected_timer;
                            }
                        }
                        //process variables from timer and update next index
                        var timer_variables = ds_map_find_value(actual_timer_map, "variables");
                        var timer_variables_size = ds_list_size(timer_variables);
                        if(timer_variables_size &gt; 0){
                            for(var i = 0; i &lt; timer_variables_size; i++){
                                var current_modificator = ds_list_find_value(timer_variables, i);
                                var scr_name = ds_map_find_value(current_modificator, "script");
                                script_execute(asset_get_index(scr_name), ds_map_find_value(current_modificator, "arguments"));
                            }
                        }
                        next_index = ds_map_find_value(actual_timer_map, "jump_to_index");
                    }
                }*/
                //if no timers applicable process variables
                if(!timer_modified_choice){
                    if(variables_modificators_size &gt; 0){
                        for(var i = 0; i &lt; variables_modificators_size; i++){
                            var current_modificator = ds_list_find_value(variables_modificators, i);
                            var scr_name = ds_map_find_value(current_modificator, "script");
                            var scr_index = asset_get_index(scr_name);
                            var arguments = ds_map_find_value(current_modificator,"arguments");
                            var arguments_size = ds_list_size(arguments);
                            switch (arguments_size){
                                case 1:
                                    var argument_0 = ds_list_find_value(arguments, 0);
                                    script_execute(scr_index, argument_0);
                                    break;
                                case 2:
                                    var argument_0 = ds_list_find_value(arguments, 0);
                                    var argument_1 = ds_list_find_value(arguments, 1);
                                    script_execute(scr_index, argument_0, argument_1);
                                    break;
                                case 3:
                                    var argument_0 = ds_list_find_value(arguments, 0);
                                    var argument_1 = ds_list_find_value(arguments, 1);
                                    var argument_2 = ds_list_find_value(arguments, 2);
                                    script_execute(scr_index, argument_0, argument_1, argument_2);
                                    break;
                                case 4:
                                    var argument_0 = ds_list_find_value(arguments, 0);
                                    var argument_1 = ds_list_find_value(arguments, 1);
                                    var argument_2 = ds_list_find_value(arguments, 2);
                                    var argument_3 = ds_list_find_value(arguments, 3);
                                    script_execute(scr_index, argument_0, argument_1, argument_2, argument_3);
                                    break;
                                case 5:
                                    show_message("5 arguments in json called functions not supported in this version of the game")   
                            }
                        }
                    }
                    next_index = ds_map_find_value(selected_choice, "jump_to_index");
                }
            }
        
            if(next_index != -2){
                if(next_index == -1){
                    show_message("Index error in dialog, check dialog data. next_index was set as -1 (meaning player choice will modify it when selected) and was not modified by choice. Game will probably crash now. Sucks to be you.");
                }
                index = next_index;
                count = false;
                seconds_elapsed = 0;
                typed_letters = 0;

                //text = current_text_string;
                choice_selector_index = 0;
                
                dialog_element = ds_list_find_value(data, index);
                current_text_string_raw = ds_map_find_value(dialog_element, "text");
                current_text_string = process_the_text_string(current_text_string_raw);
                current_text_string_length = string_length(current_text_string);
                
                obj_story_gui_name.name_text = ds_map_find_value(dialog_element, "name");
                
                if(ds_map_exists(dialog_element, "icon")){
                    current_icon_string = ds_map_find_value(dialog_element, "icon");
                    with (obj_story_gui_icon) {set_sprite_by_sprite_string(other.current_icon_string);}
                }else{
                    obj_story_gui_icon.sprite_index = spr_story_icon_default;
                }
                
                show_message_custom_debug("we did some shit");
             }else{
                //kraj, ispisano je sve iz data matrice
                var next_room_tmp = ds_map_find_value(dialog_element, "next_room");
                with(Story_CTRL){
                    story_end = true;
                    if (next_room_tmp == ""){
                        room_to_go_to = Game_CTRL.previous_room;
                    }else{
                        room_to_go_to = asset_get_index(next_room_tmp);
                    }
                }
             }
        }
        /*accept_enter = false;
        
        if !instance_exists(obj_story_choice_generator){
            //accept enter
            alarm[1] = 0.3 * room_speed;
        }*/
    //}
    button_pressed = false;
}

/*
if(up_pressed){
    //allow up only after entire message is written
    if(typed_letters == len_of_string){
        if(choice_selector_index &gt; 0){
            choice_selector_index--;    
        }
    }
}

if(down_pressed){
    //allow down only after entire message is written
    if(typed_letters == len_of_string){
        //if selector has lower value than current number of choices increment it
        if(choice_selector_index &lt; ds_list_size(choices_list) - 1){
            choice_selector_index++;
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Dialog
print = current_text_string;
typed_letters = string_length(print);

//draw narative text
draw_set_colour(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(fnt_arial_12);
draw_text_ext(obj_cinematic_text_box.bbox_left + 20, obj_cinematic_text_box.bbox_top + 50, print, -1, obj_cinematic_text_box.bbox_right - obj_cinematic_text_box.bbox_left-40);

if(!buttons_generated &amp;&amp; typed_letters &gt;= current_text_string_length){ 
    //draw choices if they are available
    choices_list = ds_map_find_value(dialog_element, "choices");
    choices_list_size = ds_list_size(choices_list);
    show_message_custom_debug("stry_assistant: choices list size:" + string(choices_list_size));
    
    if(choices_list_size &gt; 0){
        //generate_choices();
        //if(!choices_generated){
            //if (!instance_exists(obj_choice)){
                with(instance_create_unique(0,0,obj_story_choice_generator)){
                    father_storybox = other;
                    show_message(father_storybox);
                }
                show_message_custom_debug("stry_ass: instance_create_unique    obj_story_choice_generator);");
            //}
        //}
    }else{
        //if (accept_enter){
            instance_create_unique(obj_cinematic_text_box.bbox_left, obj_cinematic_text_box.bbox_bottom + 80, obj_next_page_button);
        //}
            show_message_custom_debug("stry_ass: instance_create_unique   obj_next_page_button);");
    }
    
    buttons_generated = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
